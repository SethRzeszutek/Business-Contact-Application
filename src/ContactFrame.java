// Project:		FINAL
// Class:		Java Programming
// Date:                12/6/17
// Author:              Seth Rzeszutek
// Description:         To complete the discription of the Final

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import java.text.DecimalFormat;
import java.util.Arrays;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;


public class ContactFrame extends javax.swing.JFrame {
    DefaultListModel<String> model;
    
    
    ArrayList<Contact> contactArray = new ArrayList<Contact>();
    int index = 0;
    
    
    public ContactFrame() {
        initComponents();
        //AlertClass.infoBox("- Save and Load your contact lists!\n- Clear your data list button added! \n", " New Features!");
        // Added by me
        // create the default list model object
        model = new DefaultListModel<String>();
        
        // set the model to the list
        lstNames.setModel(model);
        loadFromFile();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtStreet = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtState = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtZip = new javax.swing.JTextField();
        lblCount = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstNames = new javax.swing.JList<>();
        btnAdd = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        btnData = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        JTypeComboBox = new javax.swing.JComboBox<>();
        btnBadData = new javax.swing.JButton();
        btnSort = new javax.swing.JButton();
        relationLabel = new javax.swing.JLabel();
        relationTxt = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnLoad = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btn_ClearInput = new javax.swing.JButton();
        btn_Update = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Lab 13 - Rzeszutek"));
        jPanel1.setToolTipText("");

        jLabel1.setText("Name:");

        jLabel3.setText("Street:");

        jLabel2.setText("Phone:");

        jLabel4.setText("City:");

        jLabel5.setText("State:");

        jLabel6.setText("Zip:");

        lblCount.setText("Count: 0");

        lstNames.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstNames.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstNamesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lstNames);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jLabel7.setText("Email:");

        btnData.setText("Test Info");
        btnData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDataActionPerformed(evt);
            }
        });

        jLabel8.setText("Type:");

        JTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Business", "Family", "Friend" }));
        JTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JTypeComboBoxActionPerformed(evt);
            }
        });

        btnBadData.setText("Bad Data");
        btnBadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBadDataActionPerformed(evt);
            }
        });

        btnSort.setText("Sort");
        btnSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortActionPerformed(evt);
            }
        });

        relationLabel.setText("Company:");

        relationTxt.setText(" ");

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnLoad.setText("Load");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        btnClear.setText("Clear Box");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btn_ClearInput.setText("Clear Input");
        btn_ClearInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ClearInputActionPerformed(evt);
            }
        });

        btn_Update.setText("Update");
        btn_Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_UpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPhone)
                            .addComponent(txtName)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(txtEmail))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(JTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(relationLabel)
                                .addGap(12, 12, 12)
                                .addComponent(relationTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 117, Short.MAX_VALUE)))))
                .addGap(68, 68, 68)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtStreet, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtZip, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_Update)
                        .addGap(7, 7, 7)
                        .addComponent(btnSort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBadData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExit))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblCount)
                        .addGap(18, 18, 18)
                        .addComponent(btnClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_ClearInput)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoad))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStreet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(txtState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 47, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(JTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(relationLabel)
                    .addComponent(relationTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCount)
                    .addComponent(btnLoad)
                    .addComponent(btnClear)
                    .addComponent(btnSave)
                    .addComponent(btn_ClearInput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExit)
                    .addComponent(btnAdd)
                    .addComponent(btnData)
                    .addComponent(btnBadData)
                    .addComponent(btnSort)
                    .addComponent(btnDelete)
                    .addComponent(btn_Update)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
       addContact();
       clearTextFields();
    }//GEN-LAST:event_btnAddActionPerformed
             
    
    
    
    
    
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        System.exit(0);        // TODO add your handling code here:
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDataActionPerformed
      int randomNumber = (int) (Math.random() * (0 - 3)) + 3;
      
      if(randomNumber == 1){
        txtName.setText("Smith");
        txtPhone.setText("(440)-555-1234");
        txtEmail.setText("Contact@email.com");
        txtStreet.setText("Center Street");
        txtCity.setText("Mentor");
        txtState.setText("OH");
        txtZip.setText("44000");
        JTypeComboBox.setSelectedIndex(0);
        relationTxt.setText("Start Inc.");
      }
      
      if(randomNumber == 2){
        txtName.setText("Adams");
        txtPhone.setText("(440)-314-6628");
        txtEmail.setText("Adams@email.com");
        txtStreet.setText("New Road");
        txtCity.setText("Cleveland");
        txtState.setText("OH");
        txtZip.setText("44800");
        JTypeComboBox.setSelectedIndex(2);
        relationTxt.setText("1996");
      }
      
      if(randomNumber == 3){
        txtName.setText("Zetlaw");
        txtPhone.setText("(440)-999-1234");
        txtEmail.setText("Ztlawian@email.com");
        txtStreet.setText("Runner Avenue");
        txtCity.setText("Erie");
        txtState.setText("PA");
        txtZip.setText("45812");
        JTypeComboBox.setSelectedIndex(1);
        relationTxt.setText("Aunt");
      }
      
    }//GEN-LAST:event_btnDataActionPerformed

    private void btnBadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBadDataActionPerformed
      txtName.setText("Rockwell");
      txtPhone.setText("(440)-515-4321");
      txtEmail.setText("Rockwell@email.com");
      txtStreet.setText("4566 Jackson Road");
      txtCity.setText("jefferson");
      txtState.setText("oh1");
      txtZip.setText("4400!");
      relationTxt.setText("Flop Flip Corp.");
    }//GEN-LAST:event_btnBadDataActionPerformed

    private void btnSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortActionPerformed
        
        //No need to declare something here as we have declared it in main
        contactArray.sort(null);
        
        model.removeAllElements();
        
        for(Contact so : contactArray)
        {
            model.addElement(so.toString());
        }
    }//GEN-LAST:event_btnSortActionPerformed

    private void JTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JTypeComboBoxActionPerformed
        switch (JTypeComboBox.getSelectedIndex()) {
            case 0:

                //Sets the Type label to Company based on the inputType                
                relationLabel.setText("Company:");

                //Clears the Type textbox for a new entry
                relationTxt.setText("");
                break;

            case 1:

                //Sets the Type label to Relationship based on the inputType
                relationLabel.setText("Relationship:");

                //Clears the Type textbox for a new entry                
                relationTxt.setText("");
                break;

            case 2:

                //Sets the Type label to Year Met based on the inputType                
                relationLabel.setText("Year Met:");

                //Clears the Type textbox for a new entry
                relationTxt.setText("");
                break;
        }
    }//GEN-LAST:event_JTypeComboBoxActionPerformed

    private int confirmDialog()
    {
        //JOptionPane.showConfirmDialog
        int result = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this?", "Confirm?", 
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.NO_OPTION) 
        {
            return 0;
        } 
        else if (result == JOptionPane.YES_OPTION) 
        {
            return 1;
        }
        return 0;
    }
    
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int result = confirmDialog();
        if(result==1)
        {
            deleteContact();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        saveFile();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        loadFromFile(); 
    }//GEN-LAST:event_btnLoadActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        int result = confirmDialog();
        if(result==1)
        {
            deleteAllContacts();
        }
        
    }//GEN-LAST:event_btnClearActionPerformed

    private void btn_ClearInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ClearInputActionPerformed
        clearTextFields();
    }//GEN-LAST:event_btn_ClearInputActionPerformed

    
    private void lstNamesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstNamesMouseClicked
        String item = lstNames.getSelectedValue();
        
        String[] itemString=item.split(",");
        
        
        txtName.setText(itemString[0].replaceAll("^\\s+", ""));
        txtPhone.setText(itemString[1].replaceAll("^\\s+", ""));
        txtEmail.setText(itemString[2].replaceAll("^\\s+", ""));
        txtStreet.setText(itemString[3].replaceAll("^\\s+", ""));
        txtCity.setText(itemString[4].replaceAll("^\\s+", ""));
        txtState.setText(itemString[5].replaceAll("^\\s+", ""));
        txtZip.setText(itemString[6].replaceAll("^\\s+", ""));
        String type = itemString[7].replaceAll("^\\s+", "");
        //System.out.print(type);
        switch(type)
        {
            case "BUSINESS":
                JTypeComboBox.setSelectedItem(0);
                System.out.print("Matches Business ");
                //break;
            case "FAMILY":
                JTypeComboBox.setSelectedIndex(1);
                System.out.print("Matches Family ");
                //break;
            case "FRIEND":
                JTypeComboBox.setSelectedIndex(2);
                //System.out.print("Matches Friend ");
                //break;
            default:
                
        }
      
        //relationTxt.setText(type);
        relationTxt.setText(itemString[8].replaceAll("^\\s+", ""));
        
    }//GEN-LAST:event_lstNamesMouseClicked

    private void btn_UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_UpdateActionPerformed
        deleteContact();
        addContact();
        clearTextFields();
    }//GEN-LAST:event_btn_UpdateActionPerformed
    
    private void saveFile()
    {
        // default file name
        final String DEFAULT_FILE = "myFile.txt";
        
	try
        {
            // Create a reference to a BufferedWriter
            BufferedWriter myWriter = null;
            
            // Create a File reference to hold the file name
            File file;
            
            // Create a JFileChooser with user's home directory + folder
            String userDir = System.getProperty("user.home");
            JFileChooser fc = new JFileChooser(userDir +"/Desktop");
            
            // set the title
            fc.setDialogTitle("Buffered Writer Example 2");
            
            // you can set a new directory
//            fc.setCurrentDirectory(new File(userDir + "/Documents"));
            
            // set a .txt file filter. 1st arg is title, remaining args are extensions
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files", "txt", "text");
            fc.setFileFilter(filter);
            
            // you can add more file filters
            fc.addChoosableFileFilter(new FileNameExtensionFilter("Images", "jpg", "png", "gif", "bmp"));
            
            // display the open or save dialog and check the return value
            // null implies no parent frame
            // if the return value is APPROVE_OPTION get the selected file
            // if not use default file name of myFile.txt
            if (JFileChooser.APPROVE_OPTION == fc.showSaveDialog(null)) 
            {
                file = fc.getSelectedFile();
            }
            else
            {
                // default file if no file selected in chooser
                file = new File(DEFAULT_FILE);
            }
            
            // check if the file exists
            if(file.exists() && !file.isDirectory()) 
            { 
                // check for overwriting it
                if(JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(null, "Confirm Overwrite: " + file.getName(), "Overwrite", JOptionPane.YES_NO_OPTION))
                {
                    // if the file exists it will be over written, if the file does not exist it will be created
                    myWriter = new BufferedWriter(new FileWriter(file));                   
                }
                else
                { 
                    // exit, file exists and user does not want to overwrite it.
                    JOptionPane.showMessageDialog(null, "File Exists, you choose not to overwrite it!");
                    System.exit(0);
                }
            }
            else
            {
                // the file does not exist, create it
                myWriter = new BufferedWriter(new FileWriter(file));
            }
            
            // loop through the model in the list
            for(int i = 0; i< model.getSize();i++)
            {
                myWriter.write(model.getElementAt(i) + System.getProperty("line.separator"));
            }
            
            // immediately close the file when finished with it.
            myWriter.close();	
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage(), "File Write Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void loadFromFile()
    {
        final String DEFAULT_FILE = "myFile.txt";
        try
        {
            // Create a reference to a BufferedWriter
            BufferedReader myReader = null;
            
            // Create a File reference to hold the file name
            File file;
            
            // holds one line in the file
            String line = null;
            
            // Create a JFileChooser with user's home directory + folder
            String userDir = System.getProperty("user.home");
            JFileChooser fc = new JFileChooser(userDir +"/Desktop");
            
            // set the title
            fc.setDialogTitle("Buffered Reader Example 2");
            
            // you can set a new directory
//            fc.setCurrentDirectory(new File(userDir + "/Documents"));
            
            // set a .txt file filter. 1st arg is title, remaining args are extensions
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files", "txt", "text");
            fc.setFileFilter(filter);
            
            // you can add more file filters
            fc.addChoosableFileFilter(new FileNameExtensionFilter("Images", "jpg", "png", "gif", "bmp"));
            
            // display the open or save dialog and check the return value
            // null implies no parent frame
            // if the return value is APPROVE_OPTION get the selected file
            // if not use default file name of myFile.txt
            if (JFileChooser.APPROVE_OPTION == fc.showOpenDialog(null)) 
            {
                file = fc.getSelectedFile();
            }
            else
            {
                // default file if no file selected in chooser
                file = new File(DEFAULT_FILE);
            }
            
            // open the file for read
            myReader = new BufferedReader(new FileReader(file));
            
            // clear the model for the list box
            model.removeAllElements();
            
            // loop through the file and add to the model for the list box
            line = myReader.readLine();
            while(line != null)
            {
                model.addElement(line);
                line = myReader.readLine();
            }
            
            // immediately close the file when finished with it.
            myReader.close();	
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage(), "File Write Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    private void addContact()
    {
         // Create a reference to a Address object
        Contact conAddr;
      
        //create inputRank variable
        //initialize it because of the switch statement
        Contact.Type inputRank = Contact.Type.BUSINESS;
        
        //need to hold the value to be put in the array list
        Contact contact = null;
        
       try
       {
            switch(JTypeComboBox.getSelectedIndex())
            {
                case 0:
                    inputRank = Contact.Type.BUSINESS;
                
                    //Create a Business contact object and add it to the array
                    contact = new ContactBusiness(txtName.getText(), txtPhone.getText(),
                        txtEmail.getText(), txtStreet.getText(), txtCity.getText(), txtState.getText(),
                        txtZip.getText(), inputRank, relationTxt.getText());

                    //Add the Business contact to the model for the listbox
                    model.addElement(contact.toString());
                    
                    //Add to list
                    contactArray.add(contact);   
                    break;
                
                case 1:
                    inputRank = Contact.Type.FAMILY;
                
                    //Creates a Family contact object and add it to the array
                    contact = new ContactFamily(txtName.getText(), txtPhone.getText(),
                        txtEmail.getText(), txtStreet.getText(), txtCity.getText(), txtState.getText(),
                        txtZip.getText(), inputRank, relationTxt.getText());

                    //Add the Family to the model for the listbox
                     model.addElement(contact.toString());
                    
                    //Add to list
                    contactArray.add(contact);                       
                    break;
                
                case 2:
                    inputRank = Contact.Type.FRIEND;
                
                    //Create a Friend contact object and add it to the array
                
                    contact = new ContactFriend(txtName.getText(), txtPhone.getText(),
                        txtEmail.getText(), txtStreet.getText(), txtCity.getText(), txtState.getText(),
                        txtZip.getText(), inputRank, Integer.parseInt(relationTxt.getText()));

                    //Add the Friend to the model for the listbox
                     model.addElement(contact.toString());
                    
                    //Add to list
                    contactArray.add(contact); 
                    break;
        
            }

        
 
        // Get the current count from the Student class and display it in the label
        lblCount.setText("Count: " + Contact.getCount());
        
        index++;
       }       
       catch (ContactException ex)
        {
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    "Contact Creation Error!", JOptionPane.ERROR_MESSAGE);
        }
        //Catch all exceptions
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    "Contact Error!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void deleteAllContacts()
    {
        model.removeAllElements();
        contactArray.clear();
        Contact.restartCount();
        lblCount.setText("Count: " + Contact.getCount());
    }
    
    private void clearTextFields()
    {
        txtName.setText("");
        txtPhone.setText("");
        txtEmail.setText("");
        txtStreet.setText("");
        txtCity.setText("");
        txtState.setText("");
        txtZip.setText("");
        relationTxt.setText(""); 
    }
    
    private void deleteContact()
    {
        String item = lstNames.getSelectedValue();
        
        //Nice Error message
        if(item == null)
        {
            JOptionPane.showMessageDialog(this, "Nothing Selected to Delete", 
                    "Delete Error!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //Get the name by of the item
        String strName = item.substring(0, item.indexOf(','));
        
        //Remove the item from the ArrayList
        for(Contact items : contactArray)
        {
            if(items.getName().equals(strName))
            {
                contactArray.remove(items);
                break;
            }
        }
        model.remove(lstNames.getSelectedIndex());
        
        //Subtract one from the count and display it
        Contact.countDown();
        lblCount.setText("Count: " + Contact.getCount());
    }
    
    
    
    
    
    
    
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ContactFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> JTypeComboBox;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBadData;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnData;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSort;
    private javax.swing.JButton btn_ClearInput;
    private javax.swing.JButton btn_Update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCount;
    private javax.swing.JList<String> lstNames;
    private javax.swing.JLabel relationLabel;
    private javax.swing.JTextField relationTxt;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtState;
    private javax.swing.JTextField txtStreet;
    private javax.swing.JTextField txtZip;
    // End of variables declaration//GEN-END:variables
}
